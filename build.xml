<project name="JWS Clear-text Signature Demo" default="help">

  <!-- set properties for this build -->
  <property file="jws-jcs.properties"/>
  <property name="openkeystore.dir" location="${openkeystore}"/>
  <property name="src.dir" value="src"/>
  <property name="temp.dir" value=".tmp"/>
  <property name="dist.dir" value="dist"/>
  <property name="class_war_path" value="WEB-INF/classes/org/webpki/webapps/jws_jcs"/>

  <property name="logging" value="false"/>
  <property name="bouncycastle.first" value="true"/>
  
  <property name="appcorename" value="jws-jcs"/>
  <property name="application" value="${appcorename}.war"/>
  
  <property name="keypassword" value="foo123"/>
  <property name="webpki.lib.dir" location="${openkeystore.dir}/library/dist"/>
  <property name="third.party.lib.dir" location="${openkeystore.dir}/resources/third-party-jars"/>
  
  <property name="javaversion" value="1.8"/>
  <property name="debug" value="on"/>

  <property environment="env"/>
  <property name="catalina.home" value="${env.CATALINA_HOME}"/>

  <target name="help">
      <echo message="build tomcat zip-distribution"/>
  </target>

  <target name="_init" unless="app_path">
    <!-- Set up where application should reside --> 
    <condition property="tomcat_app_root_set">
      <isset property="env.CATALINA_HOME"/>
    </condition>
    <fail message="CATALINA_HOME must be set to environment!" unless="tomcat_app_root_set"/>

  </target>

  <target name="tomcat">
    <antcall target="build"/>
    <copy file="${dist.dir}/${application}" todir="${env.CATALINA_HOME}/webapps" overwrite="true" preservelastmodified="true"/>
  </target>

  <target name="build">
    <mkdir dir="${dist.dir}"/>
    <delete dir="${temp.dir}"/>
    <mkdir dir="${temp.dir}"/>
    <fixcrlf srcdir="."
       tab="remove"
       tablength="4"
       eol="lf"
       eof="remove"
       includes="**/*.java, **/*.css, **/*.svg, **/*.xml"/>
    <copy file="web.xml" todir="${temp.dir}"/>
    <javac debug="${debug}"
           source="${javaversion}"
           target="${javaversion}"
           srcdir="${src.dir}"
           destdir="${temp.dir}"
           includeAntRuntime="false">
        <classpath>
              <fileset dir="${webpki.lib.dir}">
                <include name="*.jar"/>
             </fileset>
             <fileset dir="${third.party.lib.dir}">
                <include name="*.jar"/>
              </fileset>
        </classpath>
    </javac>
    <replace file="${temp.dir}/web.xml">
      <replacefilter token="@bouncycastle-first@" value="${bouncycastle.first}"/>
      <replacefilter token="@logging@" value="${logging}"/>
    </replace>
    <war destfile="${dist.dir}/${application}" webxml="${temp.dir}/web.xml">
      <classes dir="${temp.dir}">
         <exclude name="web.xml"/>
      </classes>
      <lib dir="${third.party.lib.dir}">
         <include name="bcprov-*.jar"/>
      </lib>
      <lib dir="${webpki.lib.dir}">
         <include name="webpki.org-libext*.jar"/>
         <include name="webpki.org-webutil*.jar"/>
      </lib>
      <fileset dir="web"/>
      <fileset dir="${openkeystore.dir}/resources/images">
        <include name="thelab.svg"/>
        <include name="jws-jcs.svg"/>
      </fileset>
      <zipfileset dir="${openkeystore.dir}/testdata/keys" prefix="${class_war_path}">
        <include name="a*.hex"/>
        <exclude name="*128*"/>
        <include name="p256*.pem"/>
        <include name="p384*.pem"/>
        <include name="p521*.pem"/>
        <include name="r2048*.pem"/>
        <exclude name="*-key.pem"/>
        <exclude name="*-2*"/>
      </zipfileset>
      <zipfileset file="sample-signature.json" prefix="${class_war_path}"/>
    </war>
  </target>
  
  <target name="_unzipit" if="uu">
    <delete dir="${dd}/${appcorename}"/>
    <unzip src="${dd}/${appcorename}.zip" dest="${dd}"/>
  </target>

  <target name="zip-distribution">
    <fail unless="dd" message="-&#10;
***************************************************************&#10;
 You must define a distribution directory using the -D option:&#10;
 ant zip-distribution -Ddd=the_path_to_the_directory.&#10;
 Optionally you can specify -Duu=0 which deletes ${appcorename}&#10;
 and replaces the directory with the unzipped content&#10;
***************************************************************&#10;"/>
    <echo message="Producing ${appcorename} .zip and .zip.SHA1 files..."/> 
    <delete file="${dd}/${appcorename}.zip" failonerror="false"/>
    <zip destfile="${dd}/${appcorename}.zip">
      <zipfileset dir="." prefix="${appcorename}">
        <exclude name="/**/.*"/>
        <exclude name="/.tmp/**"/>
        <exclude name="**/.settings/**"/>
        <exclude name="**/bin/**"/>
        <exclude name="dist/**"/>
      </zipfileset>
    </zip>
    <checksum file="${dd}/${appcorename}.zip" fileext=".SHA1" algorithm="sha1" forceOverwrite="yes"/>
    <antcall target="_unzipit"/>
  </target>
   
</project>
